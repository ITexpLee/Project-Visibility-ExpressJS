<% layout('/layouts/boilerplate.ejs') %>
<h1>Welcome to Homepage</h1>
<audio id="myAudio"></audio>
<section style="text-align: center; margin-top: 15px; color: red; font-family: Courier New; font-weight: bold;"
    id="demoVersion"></section>

<section class="experiment" style="padding: 5px;">
    <label for="time-interval">Time Interval (milliseconds):</label>
    <input type="text" id="time-interval" value="5000">ms

    <br>
    <br> recorderType:

    <select id="audio-recorderType" style="font-size:22px;vertical-align: middle;margin-right: 5px;">
        <option>[Best Available Recorder]</option>
        <option>MediaRecorder API</option>
        <option>WebAudio API (WAV)</option>
        <option>WebAudio API (PCM)</option>
    </select>
    <br>

    <input id="left-channel" type="checkbox" checked style="width:auto;">
    <label for="left-channel">Record Mono Audio if WebAudio API is selected (above)</label>

    <br>
    <br>

    <button id="start-recording">Start</button>
    <button id="stop-recording" disabled>Stop</button>

    <button id="pause-recording" disabled>Pause</button>
    <button id="resume-recording" disabled>Resume</button>

    <!-- <button id="save-recording" disabled>Save</button> -->
</section>

<section class="experiment">
    <div id="audios-container"></div>
</section>

<script>
    //function defined for error or success callback
    function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
        navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
    }

    //Defining mediaConstraint to record audio
    let mediaConstraints = {
        audio: true
    };

    //Selecting the start button and starting recording
    document.querySelector('#start-recording').onclick = function () {
        this.disabled = true;
        captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
    };

    //Selecting the stop button and stopping recording
    document.querySelector('#stop-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.stop();
        mediaRecorder.stream.stop();
        // Adding save as soon as recording is stopped
        mediaRecorder.save();

        document.querySelector('#pause-recording').disabled = true;
        document.querySelector('#start-recording').disabled = false;
    };

    document.querySelector('#pause-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.pause();

        document.querySelector('#resume-recording').disabled = false;
    };

    document.querySelector('#resume-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.resume();

        document.querySelector('#pause-recording').disabled = false;
    };

    // document.querySelector('#save-recording').onclick = function () {
    //     this.disabled = true;
    //     mediaRecorder.save();

    //     // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
    // };

    let mediaRecorder;

    function onMediaSuccess(stream) {
        let audio = document.createElement('audio');

        audio = mergeProps(audio, {
            controls: true,
            muted: true
        });
        audio.srcObject = stream;
        audio.play();

        audiosContainer.appendChild(audio);
        audiosContainer.appendChild(document.createElement('hr'));

        mediaRecorder = new MediaStreamRecorder(stream);
        mediaRecorder.stream = stream;

        let recorderType = document.getElementById('audio-recorderType').value;

        if (recorderType === 'MediaRecorder API') {
            mediaRecorder.recorderType = MediaRecorderWrapper;
        }

        if (recorderType === 'WebAudio API (WAV)') {
            mediaRecorder.recorderType = StereoAudioRecorder;
            mediaRecorder.mimeType = 'audio/wav';
        }

        if (recorderType === 'WebAudio API (PCM)') {
            mediaRecorder.recorderType = StereoAudioRecorder;
            mediaRecorder.mimeType = 'audio/pcm';
        }

        // don't force any mimeType; use above "recorderType" instead.
        // mediaRecorder.mimeType = 'audio/webm'; // audio/ogg or audio/wav or audio/webm

        mediaRecorder.audioChannels = !!document.getElementById('left-channel').checked ? 1 : 2;
        mediaRecorder.ondataavailable = function (blob) {
            var a = document.createElement('a');
            a.target = '_blank';
            a.innerHTML = 'Open Recorded Audio No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) +
                ') Time Length: ' + getTimeLength(timeInterval);

            a.href = URL.createObjectURL(blob);

            audiosContainer.appendChild(a);
            audiosContainer.appendChild(document.createElement('hr'));
        };

        let timeInterval = document.querySelector('#time-interval').value;
        if (timeInterval) timeInterval = parseInt(timeInterval);
        else timeInterval = 5 * 1000;

        // get blob after specific time interval
        mediaRecorder.start(timeInterval);

        document.querySelector('#stop-recording').disabled = false;
        document.querySelector('#pause-recording').disabled = false;
        document.querySelector('#save-recording').disabled = false;
    }

    function onMediaError(e) {
        console.error('media error', e);
    }

    let audiosContainer = document.getElementById('audios-container');
    let index = 1;

    // below function via: http://goo.gl/B3ae8c
    function bytesToSize(bytes) {
        let k = 1000;
        let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) return '0 Bytes';
        let i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
        return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
    }

    // below function via: http://goo.gl/6QNDcI
    function getTimeLength(milliseconds) {
        let data = new Date(milliseconds);
        return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() +
            " second(s)";
    }

    // window.onbeforeunload = function () {
    //     document.querySelector('#start-recording').disabled = false;
    // };
</script>

<script src="https://cdn.webrtc-experiment.com/commits.js" async></script>
</article>